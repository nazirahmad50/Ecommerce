@model List<Ecommerce.Entities.Product>
@{
    ViewBag.Title = "ProductsTable";
}


<div>

    <form method="post">

        <div class="row">

            <div class="col-md-8">
                <div class="form-group">

                    <label>Search</label>
                    <input class="form-control" id="searchTxt" name="Search" />

                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">

                    <label>Action</label>

                    <div class="row">
                        <div class="col-md-6">
                            <button class="form-control btn btn-primary" type="button" id="searchBtn">Search</button>
                        </div>
                        <div class="col-md-6">

                            <button class="form-control btn btn-primary" type="button" id="newBtn">New</button>

                        </div>

                    </div>

                </div>
            </div>
        </div>

    </form>


</div>


<div>
    <table class="table table-striped">

        <thead>

            <!--Row tag-->
            <tr>

                <!--td is a cell-->
                <td>Product Name</td>
                <td>Category</td>
                <td>Price</td>
                <td>Action</td>

            </tr>

        </thead>

        <tbody>

            @foreach (var item in Model)
            {
                <tr>

                    <td>@item.Name</td>
                    <td>
                        @if (item.Category != null)
                        {
                            <text>@item.Category.Name</text> // show the category name as text, if we dont use text will get an error
                        }
                        else
                        {
                            <text>-</text>

                        }
                    </td>
                    <td>@item.Price</td>
                    <td>
                        <!--'id' attribute should not hold data, so we created our own elemtent attribute called 'data-id' and passed data of the items id-->
                        <button class="edtBtn" data-id="@item.ID" type="button">Edit</button>
                        <button class="deleteBtn" data-id="@item.ID" type="button">Delete</button>
                        <button class="addCart" data-id="@item.ID" type="button">Add Cart</button>



                    </td>

                </tr>
            }

        </tbody>

    </table>
</div>


<script>

    // '$' Jquery reference
    // '#' is used for ids and '.' is used for classes
    $("#searchBtn").click(function () {

        var searchTxt = $("#searchTxt").val();

        $.ajax({

            method: "GET", // By default the method is always 'GET'
            url: "/Product/ProductsTable", // Were going to pass data to the 'ProductsTable' action
            data: { search: searchTxt } // 'search' is the exact paremeter name of the 'ProductsTable' action and we are passing the 'searchTxt' to it

        })
            .done(function (response) { // the response returns an html with values

                // so set vales from the response which comes in the form of html with its values to the 'tableDiv' html
                $("#tableDiv").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });

    $("#newBtn").click(function () {


        $.ajax({

            method: "GET", // By default the method is always 'GET'
            url: "/Product/Create",

        })
            .done(function (response) { // the response returns an html with values

                // so set vales from the response which comes in the form of html with its values to the 'tableDiv' html
                $("#actionContainer").html(response);

                focusAction();
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });

    $(".edtBtn").click(function () {


        $.ajax({

            method: "GET", // By default the method is always 'GET'
            url: "/Product/Edit",
            data: { id: $(this).attr("data-id") } // which ever button is clicked get that buttons value from its attribute called 'data-id"'

        })
            .done(function (response) { // the response returns an html with values

                // so set vales from the response which comes in the form of html with its values to the 'tableDiv' html
                $("#actionContainer").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });

    $(".deleteBtn").click(function () {

        Swal.fire({
            title: 'Confirm?',
            text: "Are you sure you want to delete!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                $.ajax({

                    method: "POST",
                    url: "/Product/Delete",
                    data: { id: $(this).attr("data-id") } // which ever button is clicked get that buttons value from its attribute called 'data-id"'

                })
                    .done(function (response) { // the response returns an html with values

                        // so set vales from the response which comes in the form of html with its values to the 'tableDiv' html
                        $("#tableDiv").html(response);

                        Swal.fire("Product Deleted Successfuly");
                    })
                    .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Fail");
                    });
            }
        })



        


    });

     var products = [];
     $(".addCart").click(function () {

         var productId = $(this).attr("data-id")

         products.push(productId);

         // first param is the name of the cookie
         // for second param we can asign anything we want
         // third param we assign a path
         $.cookie("cartProducts", products.join("-"), { path: "/" }); // 'join' will join the values in the array as string, e.g. without join [1,2,3] - with join ["1-2-3"]
     });


    function focusAction() {
        $("html, body").animate({
            scrollTop: $("#actionContainer").offset().top - 100
        }, 1000);
    }



</script>