@model Ecommerce.Web.ViewModels.FilterProductsViewModel

@{
    var defaultImg = "/Content/images/system/placeholder.jpg";
}

<!--Showing Products-->
<div class="filter-shop clearfix">
    <p class="showing-product float-right">
        Showing
        @(((Model.Pager.CurrentPage - 1) * Model.Pager.PageSize)
        + 1)
        –
        @(((Model.Pager.CurrentPage - 1) * Model.Pager.PageSize)
        + (Model.Products.Count < Model.Pager.PageSize ? Model.Products.Count : Model.Pager.PageSize))
        of @Model.Pager.TotalItems Products
    </p>
</div>

<!--Products List-->
<div class="product-content product-threecolumn product-slidebar clearfix">
    <ul class="product style2 sd1">

        @foreach (var item in Model.Products)
        {

            var imgURL = string.IsNullOrEmpty(item.ImageURL) ? defaultImg : item.ImageURL;


            <li class="product-item">
                <div class="product-thumb clearfix">
                    <a href="#">
                        <img src="@imgURL" alt="image">
                    </a>
                    <span class="new">New</span>
                </div>
                <div class="product-info clearfix">
                    <span class="product-title">@item.Name</span>
                    <div class="price">
                        <ins>
                            <span class="amount">$@item.Price</span>
                        </ins>
                    </div>
                </div>
                <div class="add-to-cart text-center">
                    <a class="productAddToCart" data-id="@item.ID">ADD TO CART</a>
                </div>
                <a href="#" class="like"><i class="fa fa-heart-o"></i></a>
            </li>
        }


    </ul><!-- /.product -->
</div><!-- /.product-content -->
<!--Pagination-->
<!--Same as category pagination but with 'a href' not buttons -->
@if (Model.Pager != null) // if pages is not null
{
    <div class="product-pagination text-center clearfix">

        <ul class="flat-pagination">

            <!--if current page is more than 1-->
            @if (Model.Pager.CurrentPage > 1) // start pages
            {
                // show previous page buttons

                <li class="prev">
                    <a data-href="@Url.Action("FilterProducts", "Shop", new { pageNo = Model.Pager.CurrentPage - 1, sortBy = Model.SortBy, categoryId = Model.categoryId })" class="pageDataLink"><i class="fa fa-angle-left"></i></a>
                </li>

            }

            <!--loop through as long as the start page is less than or equal to the end page-->
            @for (var page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++) // the middle pages
            {
                string activeClass = Model.Pager.CurrentPage == page ? " active bg-info" : string.Empty;

                <li class="@activeClass"><a data-href="@Url.Action("FilterProducts", "Shop", new { pageNo = page, sortBy = Model.SortBy, categoryId = Model.categoryId })" class="pageDataLink" title="">@page</a></li>

            }

            <!--if the current page is less than the total pages, means if current page is not on the last page-->
            @if (Model.Pager.CurrentPage < Model.Pager.TotalPages) // the last pages
            {
                // show next buttons
                <li><a  data-href="@Url.Action("FilterProducts", "Shop", new { pageNo = Model.Pager.EndPage, sortBy = Model.SortBy, categoryId = Model.categoryId })" class="pageDataLink"><i class="fa fa-angle-right"></i></a></li>

            }


        </ul>
    </div>

    // these hidden fields are used in index view
    <input type="hidden" id="searchTerm" value="@Model.searchTerm" />
    <input type="hidden" id="sortBy" value="@Model.SortBy" />
    <input type="hidden" id="categoryId" value="@Model.categoryId" />


}

<script>

    // this will work on the pagination only
    $(".pageDataLink").click(function () {

        var url = $(this).attr("data-href");

        if (url != null && url != undefined) {

            GetDataUrl(url); // call the 'GetDataUrl' func which is in index view
        }

    })

    
     var products;

     $(".productAddToCart").click(function () {

         var existingCookieData = $.cookie("cartProducts"); // get all the cookies in 'cartProducts'

         if (existingCookieData != undefined && existingCookieData != "" && existingCookieData != null) { // if existing cookies are not null, empty or undefined

             products = existingCookieData.split("-"); // split those existing cookies at '-', e.g. without split 40-22-33, with split [40,22,33]

         } else {
             products = [];
         }

         var productId = $(this).attr("data-id") // get the values from the attribute 'data-id")'

         products.push(productId);

         // first param is the name of the cookie
         // for second param we can asign anything we want
         // third param we assign a path
         $.cookie("cartProducts", products.join("-"), { path: "/" }); // 'join' will join the values in the array as string, e.g. without join [1,2,3] - with join ["1-2-3"]

         updateCartProducts(); // update the carts count

         Swal.fire({
             title: 'Done',
             text: "Product Added To Cart!",
             type: 'success',
         });

     });


</script>