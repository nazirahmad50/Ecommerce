@model  Ecommerce.Web.ViewModels.CategorySearchViewModels
@{
    ViewBag.Title = "CategoriesTable";
}


<div>

    <form method="post">

        <div class="row">

            <div class="col-md-8">
                <div class="form-group">

                    <label>Search</label>
                    <input class="form-control" id="searchTxt" name="Search" value="@Model.SearchTerm" />

                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">

                    <label>Action</label>

                    <div class="row">
                        <div class="col-md-4 pr-0">
                            <button class="form-control btn btn-primary" type="button" id="searchBtn">Search</button>
                        </div>


                        <div class="col-md-4 pr-0">

                            <button class="form-control btn btn-primary" type="button" id="resetBtn">Reset</button>

                        </div>

                        <div class="col-md-4 pr-0">

                            <button class="form-control btn btn-primary" type="button" id="newBtn">New</button>

                        </div>


                    </div>

                </div>
            </div>
        </div>

    </form>


</div>

<div>
    <table class="table table-striped">

        <thead>

            <tr>
                <th class="font-weight-bold">Category</th>
                <th class="font-weight-bold">Products</th>
                <th class="font-weight-bold">Action</th>



            </tr>

        </thead>

        <tbody>
            @if (Model.Categories != null && Model.Categories.Count > 0)
            {



                foreach (var item in Model.Categories)
                {


                    <tr>

                        <td>@item.Name</td>
                        <td>
                            @item.Products.Count
                        </td>
                        <td>

                            <button class="edtBtn" data-id="@item.ID" type="button">Edit</button>
                            <button class="deleteBtn" data-id="@item.ID" type="button">Delete</button>

                        </td>


                    </tr>
                }
            }

        </tbody>

    </table>



    <!--Pagination-->
    <div>

        @if (Model.Pager != null) // if pages is not null
        {
            // if current page is more than 1
            if (Model.Pager.CurrentPage > 1) // start pages
            {
                // show both first and previous page buttons
                <button class="pageBtns" data-pageNo="1">First</button>
                <button class="pageBtns" data-pageNo="@(Model.Pager.CurrentPage - 1)">Previous</button>

            }

            // loop through as long as the start page is less than or equal to the end page
            for (var page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++) // the middle pages
            {
                string activeClass = Model.Pager.CurrentPage == page ? " active bg-info" : string.Empty;

                <button class=" @activeClass pageBtns" data-pageNo="@page">@page</button>

            }

            // if the current page is less than the total pages, means if current page is not on the last page
            if (Model.Pager.CurrentPage < Model.Pager.TotalPages) // the last pages
            {
                // show next and last page buttons
                <button class="pageBtns" data-pageNo="@(Model.Pager.CurrentPage + 1)">Next</button>
                <button class="pageBtns" data-pageNo="@Model.Pager.EndPage">Last</button>



            }


        }



    </div>



</div>

<script>

      $(".pageBtns").click(function () {

        $.ajax({

            method: "GET", // By default the method is always 'GET'
            url: '@Url.Action("CategoriesTable", "Category")',
            data: {
                pageNo: $(this).attr("data-pageNo"),
                search: '@Model.SearchTerm' 
            }

        })
            .done(function (response) { // the response returns an html with values

                // so set vales from the response which comes in the form of html with its values to the 'tableDiv' html
                $("#tableDiv").html(response);

                focusAction();
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });

    $("#searchBtn").click(function () {

        var searchTxt = $("#searchTxt").val();

        $.ajax({

            method: "GET",
            // use UrlHelper method called 'Action' which takes the action first and then the controller
            // purpose of this is that we can customize this url like change it to '/Categories/All' which is done in 'RouteConfig'
            url: '@Url.Action("CategoriesTable", "Category")',
            data: { search: searchTxt }

        })
            .done(function (response) {

                $("#tableDiv").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });


    })


    $("#resetBtn").click(function () {

        var searchTxt = "";

        $.ajax({

            method: "GET",
            // use UrlHelper method called 'Action' which takes the action first and then the controller
            // purpose of this is that we can customize this url like change it to '/Categories/All' which is done in 'RouteConfig'
            url: '@Url.Action("CategoriesTable", "Category")',
            data: { search: searchTxt }

        })
            .done(function (response) {

                $("#tableDiv").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });


    })

    $("#newBtn").click(function () {


        $.ajax({

            method: "GET",
            url: '@Url.Action("Create", "Category")',

        })
            .done(function (response) {

                $("#createForm").html(response);

                focusAction("createForm");
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });


    })


    $(".edtBtn").click(function () {


        $.ajax({

            method: "GET",
            url: '@Url.Action("Edit", "Category")',
            data: { id: $(this).attr("data-id") }

        })
            .done(function (response) {

                $("#createForm").html(response);

                focusAction("createForm");

            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });


    })

    $(".deleteBtn").click(function () {

        Swal.fire({
            title: 'Confirm?',
            text: "Are you sure you want to delete!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {

                $.ajax({

                    method: "POST",
                    url: '@Url.Action("Delete", "Category")',
                    data: { id: $(this).attr("data-id") }

                })
                    .done(function (response) {

                        $("#tableDiv").html(response);

                        Swal.fire("Category Deleted Successfuly");

                    })
                    .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Fail");
                    });


            }
        })

    })


</script>